==================
Macro definitions
==================

GLOBAL &Macroname

LOCAL &GLOBAL

PRIVATE &msg1 &(started) &line_counT

---

(script
  (macro_declaration
    (identifier))
  (macro_declaration
    (identifier))
  (macro_declaration
    (identifier)
    (identifier)
    (identifier)))

==================
Recursive macro expansion
==================

&&cmd

---

(script
  (recursive_macro_expansion
    (identifier)))

==================
Assignment expression
==================

&a = 1
&b=&(macro)

&c=~&a+100.

---

(script
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (identifier))
  (assignment_expression
    (identifier)
    (binary_expression
      (unary_expression
        (identifier))
      (literal))))

==================
Binary operators
==================

&a=1&&2
&a = 1^^&b
&a= &b||2
&a= 1+2
&a= 1-&b
&a= &b*2
&a= 1/2
&a= 1%&b
&a= &b|2
&a= 1^2
&a= 1&&b
&a= &b==2
&a= 1!=2
&a= 1>&b
&a= &b>=2
&a= 1<=2
&a= 2<1
&a= 1<<&b
&a= &b>>2

---

(script
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (identifier)))
  (assignment_expression
    (identifier)
    (binary_expression
      (identifier)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (identifier)))
  (assignment_expression
    (identifier)
    (binary_expression
      (identifier)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (identifier)))
  (assignment_expression
    (identifier)
    (binary_expression
      (identifier)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (identifier)))
  (assignment_expression
    (identifier)
    (binary_expression
      (identifier)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (identifier)))
  (assignment_expression
    (identifier)
    (binary_expression
      (identifier)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (identifier)))
  (assignment_expression
    (identifier)
    (binary_expression
      (identifier)
      (literal))))

==================
Unary operators
==================

&a= !1
&a=+&b
&a= -5.7
&a= ~1.ms

---

(script
  (assignment_expression
    (identifier)
    (unary_expression
      (literal)))
  (assignment_expression
    (identifier)
    (unary_expression
      (identifier)))
  (assignment_expression
    (identifier)
    (unary_expression
      (literal)))
  (assignment_expression
    (identifier)
    (unary_expression
      (literal))))

==================
Range expressions
==================

&a= 0x1000..0x1fff
&a=0x1000--0x1fff
&a=(-1000.)--{-50.}
&a='a'--'f'
&a='A'..'F'
&a=teststart--testend
&a=`main`--`_exit`

---

(script
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (unary_expression
        (literal))
      (unary_expression
        (literal))))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal))))
