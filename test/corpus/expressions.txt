==================
Macro definitions
==================

GLOBAL &Macroname

LOCAL &GLOBAL

PRIVATE &msg1 &(started) &{line_counT}

PARAMETERS &_myvalue1 &my_Value2

---

(script
  (macro_definition
    command: (identifier)
    macro: (macro))
  (macro_definition
    command: (identifier)
    macro: (macro))
  (macro_definition
    command: (identifier)
    macro: (macro)
    macro: (macro)
    macro: (macro))
  (macro_definition
    command: (identifier)
    macro: (macro)
    macro: (macro)))

==================
Recursive macro expansion
==================

&&cmd

---

(script
  (recursive_macro_expansion
    (identifier)))

==================
Internal C-style variable definitions
==================

Var.NEWLOCAL int \i
Var.NEWGLOBAL char[10][128] \myStr

---

(script
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (literal)
      variable: (identifier)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (literal)
      variable: (identifier))))

==================
Number literals
==================

&a = 0y100010001

&b = 1000
&b = 123445.

&c = 0x12af
&c = 0xA12F

&d = 1.2
&d = 1.3e+34
&d = 0.123

---

(script
  (assignment_expression
    left: (macro)
    right: (integer))
  (assignment_expression
    left: (macro)
    right: (integer))
  (assignment_expression
    left: (macro)
    right: (integer))
  (assignment_expression
    left: (macro)
    right: (integer))
  (assignment_expression
    left: (macro)
    right: (integer))
  (assignment_expression
    left: (macro)
    right: (float))
  (assignment_expression
    left: (macro)
    right: (float))
  (assignment_expression
    left: (macro)
    right: (float)))

==================
Bitmask literals
==================

&a = 0y10xx10
&a = 0yX111XXX

&b = 0xFX
&b = 0xff1cxxxx

---

(script
  (assignment_expression
    left: (macro)
    right: (bitmask))
  (assignment_expression
    left: (macro)
    right: (bitmask))
  (assignment_expression
    left: (macro)
    right: (bitmask))
  (assignment_expression
    left: (macro)
    right: (bitmask)))

==================
Time literals
==================

&a = 10s
&a = 10.s
&a = 23.24ms
&a = 123us
&a = 75.0ns

---

(script
  (assignment_expression
    left: (macro)
    right: (time))
  (assignment_expression
    left: (macro)
    right: (time))
  (assignment_expression
    left: (macro)
    right: (time))
  (assignment_expression
    left: (macro)
    right: (time))
  (assignment_expression
    left: (macro)
    right: (time)))


==================
Frequency literals
==================

Trace.CLOCK 50.MHZ 1.mhz
Trace.CLOCK 10.1GHZ 0.7ghz
SYStem.JtagClock  1kHZ 0.khz
SYStem.VirtualTiming.InternalClock 1hz 10HZ


---

(script
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (frequency)
      (frequency)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (frequency)
      (frequency)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (frequency)
      (frequency)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (frequency)
      (frequency))))

==================
String literals
==================

&a = "name"
&a = "abc""def"
&a = "\"

&b = "line continuation \
character"
&b = \
"line continuation character"

---

(script
  (assignment_expression
    left: (macro)
    right: (string))
  (assignment_expression
    left: (macro)
    right: (string))
  (assignment_expression
    left: (macro)
    right: (string))
  (assignment_expression
    left: (macro)
    right: (string))
  (assignment_expression
    left: (macro)
    right: (string)))

==================
Character literals
==================

&a = 'a'
&a = 'z'
&a = 'A'
&a = 'Z'
&a = '0'
&a = '9'
&a = '\'
&a = '''

&b = '\
9'
&b = \
'0'

&c = '\0'

---

(script
  (assignment_expression
    left: (macro)
    right: (character))
  (assignment_expression
    left: (macro)
    right: (character))
  (assignment_expression
    left: (macro)
    right: (character))
  (assignment_expression
    left: (macro)
    right: (character))
  (assignment_expression
    left: (macro)
    right: (character))
  (assignment_expression
    left: (macro)
    right: (character))
  (assignment_expression
    left: (macro)
    right: (character))
  (assignment_expression
    left: (macro)
    right: (character))
  (assignment_expression
    left: (macro)
    right: (character))
  (assignment_expression
    left: (macro)
    right: (character))
  (assignment_expression
    left: (macro)
    right: (character)))

==================
Symbol literals
==================

&a = _exit
&a = SIEVE

&b = \MCC\sieve
&b = \\app\MCC\sieve
&b = \\\1\\linux\do_mounts\load_ramdisk
&b = \\\Dom0\\linux\do_mounts\load_ramdisk

&c = \\linux\\load_ramdisk
&c = \\\Dom0\\\\load_ramdisk

&c = `main`
&c = `nestxf1::~nestxf1`
&c = \`ops::operator<<=`

List \\sieve\sieve\fill_buffer+0x64
Var.set `class1::operator+(int)\i`

List main\47
Data.dump func4\4+0x0e


---

(script
  (assignment_expression
    left: (macro)
    right: (identifier))
  (assignment_expression
    left: (macro)
    right: (identifier))
  (assignment_expression
    left: (macro)
    right: (symbol))
  (assignment_expression
    left: (macro)
    right: (symbol))
  (assignment_expression
    left: (macro)
    right: (symbol))
  (assignment_expression
    left: (macro)
    right: (symbol))
  (assignment_expression
    left: (macro)
    right: (symbol))
  (assignment_expression
    left: (macro)
    right: (symbol))
  (assignment_expression
    left: (macro)
    right: (symbol))
  (assignment_expression
    left: (macro)
    right: (symbol))
  (assignment_expression
    left: (macro)
    right: (symbol))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (binary_expression
        left: (symbol)
        right: (integer))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (symbol)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (symbol)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (binary_expression
        left: (symbol)
        right: (integer)))))

==================
Address literals
==================

&a = P:0x1af
&a = P:1234
&a = P:1234.

&b = UD:0x1000
&b = NSP:1:::50.::0x0000:0xffff000008080004

&c = P:&HEAD
&c = EA:&HEAD+0x4

---

(script
  (assignment_expression
    left: (macro)
    right: (address))
  (assignment_expression
    left: (macro)
    right: (address))
  (assignment_expression
    left: (macro)
    right: (address))
  (assignment_expression
    left: (macro)
    right: (address))
  (assignment_expression
    left: (macro)
    right: (address))
  (assignment_expression
    left: (macro)
    right: (access_class)
    right: (macro))
  (assignment_expression
    left: (macro)
    right: (access_class)
    right: (binary_expression
      left: (macro)
      right: (integer))))

==================
Path literals
==================

DO TEST.CMM
DO .\test.cmm
DO ..\test.cmm
DO A:\FOLDER\TEST.CMM
DO objs\abc.abs

CD.DO objs/abs.abs
CD.DO ./src/abc.def
CD.DO ../src/abc.def
CD.DO ~/proj/src/main.c

PEDIT ~~\a\b\c
PEDIT ~~~\a\b.cmm
PEDIT ~~~~\demo\analyzer\perf.ts

OPEN #4 ~~/a/b/c
OPEN #4 ~~~/a/b.cmm
OPEN #4 ~~~~/demo/analyzer/perf.ts

PSTEP ~~/demo/arm/compiler/arm/arm9.cmm
Data.LOAD *.abs
DO \practice\*
ChDir.DO \practice\*
EDIT a?.c
DIR *.obj

---

(script
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (file_handle)
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (file_handle)
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (file_handle)
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (path))))

==================
PRACTICE functions
==================

&a = Register(PC)
&a = FOUND()
&a = OS.ENV(HOME)
&a = Data.Word.BigEndean(MX:0x1234)
&a=STRing.Replace(OS.PWD(),"/",0.)

  IF f0()&&(f1("&a",":"))
  (
    PRINT "A"
  )

  WHILE (EVAL.TYPE()==0x80)&&(STRing.FIND("&abc",":"))
  (
    PRINT "B"
  )

WAIT !RUN()

---

(script
  (assignment_expression
    left: (macro)
    right: (call_expression
      function: (identifier)
      arguments: (argument_list
        (identifier))))
  (assignment_expression
    left: (macro)
    right: (call_expression
      function: (identifier)
      arguments: (argument_list)))
  (assignment_expression
    left: (macro)
    right: (call_expression
      function: (identifier)
      arguments: (argument_list
        (identifier))))
  (assignment_expression
    left: (macro)
    right: (call_expression
      function: (identifier)
      arguments: (argument_list
        (address))))
  (assignment_expression
    left: (macro)
    right: (call_expression
      function: (identifier)
      arguments: (argument_list
        (call_expression
          function: (identifier)
          arguments: (argument_list))
        (string)
        (integer))))
  (if_block
    command: (identifier)
    condition: (binary_expression
      left: (call_expression
        function: (identifier)
        arguments: (argument_list))
      right: (call_expression
        function: (identifier)
        arguments: (argument_list
          (string)
          (string))))
    (block
      (command_expression
        command: (identifier)
        arguments: (argument_list
          (string)))))
  (while_block
    command: (identifier)
    condition: (binary_expression
      left: (binary_expression
        left: (call_expression
          function: (identifier)
          arguments: (argument_list))
        right: (integer))
      right: (call_expression
        function: (identifier)
        arguments: (argument_list
          (string)
          (string))))
    (block
      (command_expression
        command: (identifier)
        arguments: (argument_list
          (string)))))
    (command_expression
      command: (identifier)
      arguments: (argument_list
        (unary_expression
          argument: (call_expression
            function: (identifier)
            arguments: (argument_list))))))

==================
Commands
==================

::B::WinPrint.Data.dump  0x1000 /Byte
Data.DRAWFFT ,%Decimal.Byte,VM:0++0x4f ,, 2.0 512., ,
List ,,Register(PC)

PEDIT *
OPEN #1,"~~/license.t32" /Read

OS.Command "&in" > "&out"
OS.Hidden cat &src >> &dst
OS.Hidden copy /b &a + &b  &c

CD.DO /home
do a/b/c

---

(script
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (integer)
      (identifier)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (identifier)
      (binary_expression
        left: (address)
        right: (integer))
      (float)
      (integer)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (call_expression
        function: (identifier)
        arguments: (argument_list
          (identifier)))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (literal)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (file_handle)
      (string)
      (identifier)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (string)
      (literal)
      (string)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (identifier)
      (macro)
      (literal)
      (macro)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (identifier)
      (identifier)
      (macro)
      (literal)
      (macro)
      (macro)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (identifier)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (binary_expression
        left: (binary_expression
          left: (identifier)
          right: (identifier))
        right: (identifier)))))

==================
Commands with embedded blocks
==================

DIALOG.view
(&+
       POS 1. 1. 10.
text:  TEXT "A Basic Dialog"
)

DIALOG.view
(&-
MYNAME: POS 22. 0. 24. 1.
        DEFEDIT "" ""
)

---

(script
  (command_expression
    command: (identifier))
  (block
    (command_expression
      command: (identifier)
      arguments: (argument_list
        (integer)
        (integer)
        (integer)))
    (labeled_expression
      label: (identifier)
      (command_expression
        command: (identifier)
        arguments: (argument_list
          (string)))))
  (command_expression
    command: (identifier))
  (block
    (labeled_expression
      label: (identifier)
      (command_expression
        command: (identifier)
        arguments: (argument_list
          (integer)
          (integer)
          (integer)
          (integer))))
    (command_expression
      command: (identifier)
      arguments: (argument_list
        (string)
        (string)))))

==================
Commands with internal C-style variables
==================

Var.Set \i=0x42
Var.Set \myStr[5]="hello"
ECHO %Hex Var.VALUE(\i)
ECHO Var.STRing(\myStr[5])
Var.View %all \i \myStr
Var.Assign \myarr[&i]="&val"

---

(script
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (assignment_expression
        left: (identifier)
        right: (integer))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (assignment_expression
        left: (identifier)
        right: (string))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (identifier)
      (call_expression
        function: (identifier)
        arguments: (argument_list
          (identifier)))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (call_expression
        function: (identifier)
        arguments: (argument_list
          (identifier)))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (identifier)
      (identifier)
      (identifier)))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (assignment_expression
        left: (c_subscript_expression
          argument: (identifier)
          index: (macro))
        right: (string)))))

==================
Commands with C expression
==================

Var.set *0x2000 = 1

Var.view *(&flags+20)
Var.set (long)__START

Var.set (0xdeadbeef)(1,5.0,3)
Var.set strcmp("123" , "abc")

Var.set vdblarray[2..4][(i-1)..(i+1)]
Var.ASSIGN \string_array[2]="element2"

Var.set  flags[\a++]
Var.set  flags[--\a]

Var.View ast->left=(left_t *)ast->left->right

---

(script
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (assignment_expression
        left: (c_pointer_expression
          argument: (integer))
        right: (integer))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (c_pointer_expression
        argument: (binary_expression
          left: (macro)
          right: (integer)))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (c_cast_expression
        type: (identifier)
        value: (identifier))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (call_expression
        function: (integer)
        arguments: (argument_list
          (integer)
          (float)
          (integer)))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (call_expression
        function: (identifier)
        arguments: (argument_list
          (string)
          (string)))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (c_subscript_expression
        argument: (c_subscript_expression
          argument: (identifier)
          index: (binary_expression
            left: (integer)
            right: (integer)))
        index: (binary_expression
          left: (binary_expression
            left: (identifier)
            right: (integer))
          right: (binary_expression
            left: (identifier)
            right: (integer))))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (assignment_expression
        left: (identifier)
        right: (string))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (c_subscript_expression
        argument: (identifier)
        index: (unary_expression
          argument: (identifier)))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (c_subscript_expression
        argument: (identifier)
        index: (unary_expression
          argument: (identifier)))))
  (command_expression
    command: (identifier)
    arguments: (argument_list
      (assignment_expression
        left: (c_field_expression
          argument: (identifier)
          field: (identifier))
        right: (c_cast_expression
          type: (identifier
            (identifier))
          value: (c_field_expression
            argument: (c_field_expression
              argument: (identifier)
              field: (identifier))
            field: (identifier)))))))

==================
Assignment expression
==================

&a = 1
&b=&(macro)

&c=~&a+100.

---

(script
  (assignment_expression
    left: (macro)
    right: (integer))
  (assignment_expression
    left: (macro)
    right: (macro))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (unary_expression
        argument: (macro))
      right: (integer))))

==================
Binary operators
==================

&a=1&&2
&a = 1^^&b
&a= &b||2
&a= 1ms+2.ns
&a= 1-&b
&a= &b*2
&a= 1/2
&a= 1%&b
&a= &b|2
&a= 1^2
&a= 1&&b
&a= &b==2
&a= 1!=2
&a= 1>&b
&a= &b>=2
&a= 1<=2
&a= 2<1
&a= 1<<&b
&a= &b>>2

---

(script
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (macro)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (macro)
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (time)
      right: (time)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (macro)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (macro)
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (macro)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (macro)
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (macro)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (macro)
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (macro)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (macro)
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (macro)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (macro)
      right: (integer))))

==================
Unary operators
==================

&a= !1
&a=+&b
&a= -5.7
&a= ~1.ms

---

(script
  (assignment_expression
    left: (macro)
    right: (unary_expression
      argument: (integer)))
  (assignment_expression
    left: (macro)
    right: (unary_expression
      argument: (macro)))
  (assignment_expression
    left: (macro)
    right: (unary_expression
      argument: (float)))
  (assignment_expression
    left: (macro)
    right: (unary_expression
      argument: (time))))

==================
Range operator
==================

&a= 0x1000..0x1fff
&a=0x1000--0x1fff
&a=(-1000.)--{-50.}
&a='a'--'f'
&a='A'..'F'
&a=teststart--testend
&a=`main`..`_exit`
&a=2..4.

---

(script
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (unary_expression
        argument: (integer))
      right: (unary_expression
        argument: (integer))))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (character)
      right: (character)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (character)
      right: (character)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (identifier)
      right: (identifier)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (symbol)
      right: (symbol)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (integer))))

==================
Operator precedence
==================

&a = 1<<!2*3
&a = 1>>~2/3

&b = 1+!2*3
&b = 1-~2%3

&c = 1+!2!=3
&c = 1-~2>=3

&d = 1&!2==3

&e = 1&+2^3

&f = 1|+2^3

&g = 1&&-2^3

&h = 1^^+2&&3

&i = 1^^+2||3

---

(script
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (binary_expression
        left: (integer)
        right: (unary_expression
          argument: (integer)))
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (binary_expression
        left: (integer)
        right: (unary_expression
          argument: (integer)))
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (binary_expression
        left: (unary_expression
          argument: (integer))
        right: (integer))))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (binary_expression
        left: (unary_expression
          argument: (integer))
        right: (integer))))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (binary_expression
        left: (integer)
        right: (unary_expression
          argument: (integer)))
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (binary_expression
        left: (integer)
        right: (unary_expression
          argument: (integer)))
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (binary_expression
        left: (unary_expression
          argument: (integer))
        right: (integer))))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (binary_expression
        left: (integer)
        right: (unary_expression
          argument: (integer)))
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (binary_expression
        left: (unary_expression
          argument: (integer))
        right: (integer))))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (binary_expression
        left: (unary_expression
          argument: (integer))
        right: (integer))))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (binary_expression
        left: (unary_expression
          argument: (integer))
        right: (integer))))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (binary_expression
        left: (integer)
        right: (unary_expression
          argument: (integer)))
      right: (integer))))

==================
Expressions with parentheses
==================

&a = (1+FOUND())
&a = (-1+&(b))*3
&a = {(1)&&(-&b^3)}

---

(script
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (call_expression
        function: (identifier)
        arguments: (argument_list))))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (binary_expression
        left: (unary_expression
          argument: (integer))
        right: (macro))
      right: (integer)))
  (assignment_expression
    left: (macro)
    right: (binary_expression
      left: (integer)
      right: (binary_expression
        left: (unary_expression
          argument: (macro))
        right: (integer)))))
