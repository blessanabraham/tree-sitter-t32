==================
Macro definitions
==================

GLOBAL &Macroname

LOCAL &GLOBAL

PRIVATE &msg1 &(started) &line_counT

---

(script
  (macro_declaration
    (identifier))
  (macro_declaration
    (identifier))
  (macro_declaration
    (identifier)
    (identifier)
    (identifier)))

==================
Recursive macro expansion
==================

&&cmd

---

(script
  (recursive_macro_expansion
    (identifier)))

==================
Number literals
==================

&a = 0y100010001

&b = 1000
&b = 123445.

&c = 0x12af
&c = 0xA12F

&d = 1.2
&d = 1.3e+34
&d = 0.123

---

(script
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal)))

==================
Bitmask literals
==================

&a = 0y10xx10
&a = 0yX111XXX

&b = 0xFX
&b = 0xff1cxxxx

---

(script
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal)))

==================
Time literals
==================

&a = 10s
&a = 10.s
&a = 23.24ms
&a = 123us
&a = 75.0ns

---

(script
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal)))

==================
String literals
==================

&a = "name"
&a = "abc""def"

&b = "line continuation \
character"
&b = \
"line continuation character"

---

(script
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal)))

==================
Character literals
==================

&a = 'a'
&a = 'z'
&a = 'A'
&a = 'Z'
&a = '0'
&a = '9'

&b = '\
9'
&b = \
'0'

---

(script
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal)))

==================
Symbol literals
==================

&a = `main`
&b = _exit

---

(script
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal)))

==================
Address literals
==================

&a = P:0x1af
&a = P:1234
&a = P:1234.

&b = UD:0x1000
&b = NSP:1:::50.::0x0000:0xffff000008080004

---

(script
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (literal)))

==================
Assignment expression
==================

&a = 1
&b=&(macro)

&c=~&a+100.

---

(script
  (assignment_expression
    (identifier)
    (literal))
  (assignment_expression
    (identifier)
    (identifier))
  (assignment_expression
    (identifier)
    (binary_expression
      (unary_expression
        (identifier))
      (literal))))

==================
Binary operators
==================

&a=1&&2
&a = 1^^&b
&a= &b||2
&a= 1+2
&a= 1-&b
&a= &b*2
&a= 1/2
&a= 1%&b
&a= &b|2
&a= 1^2
&a= 1&&b
&a= &b==2
&a= 1!=2
&a= 1>&b
&a= &b>=2
&a= 1<=2
&a= 2<1
&a= 1<<&b
&a= &b>>2

---

(script
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (identifier)))
  (assignment_expression
    (identifier)
    (binary_expression
      (identifier)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (identifier)))
  (assignment_expression
    (identifier)
    (binary_expression
      (identifier)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (identifier)))
  (assignment_expression
    (identifier)
    (binary_expression
      (identifier)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (identifier)))
  (assignment_expression
    (identifier)
    (binary_expression
      (identifier)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (identifier)))
  (assignment_expression
    (identifier)
    (binary_expression
      (identifier)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (identifier)))
  (assignment_expression
    (identifier)
    (binary_expression
      (identifier)
      (literal))))

==================
Unary operators
==================

&a= !1
&a=+&b
&a= -5.7
&a= ~1.ms

---

(script
  (assignment_expression
    (identifier)
    (unary_expression
      (literal)))
  (assignment_expression
    (identifier)
    (unary_expression
      (identifier)))
  (assignment_expression
    (identifier)
    (unary_expression
      (literal)))
  (assignment_expression
    (identifier)
    (unary_expression
      (literal))))

==================
Range operator
==================

&a= 0x1000..0x1fff
&a=0x1000--0x1fff
&a=(-1000.)--{-50.}
&a='a'--'f'
&a='A'..'F'
&a=teststart--testend
&a=`main`..`_exit`

---

(script
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (unary_expression
        (literal))
      (unary_expression
        (literal))))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal)))
  (assignment_expression
    (identifier)
    (binary_expression
      (literal)
      (literal))))
